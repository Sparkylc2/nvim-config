-- Set leader key
vim.g.mapleader = " "
vim.g.maplocalleader = " "

local keymap = vim.keymap.set

-- Better window navigation
local opts = { noremap = true, silent = true }
local modes = { "n", "x", "o" }

for _, m in ipairs(modes) do
	vim.keymap.set(m, "k", "h", opts) -- left
	vim.keymap.set(m, "u", "j", opts) -- down
	vim.keymap.set(m, "l", "k", opts) -- up
	vim.keymap.set(m, "h", "l", opts) -- right
end

vim.keymap.set("n", "j", "u", { desc = "Undo", noremap = true, silent = true })
vim.keymap.set("n", "J", "<C-r>", { desc = "Redo" })

-- movement
vim.keymap.set("n", "<C-w>k", "<C-w>h", opts) -- left
vim.keymap.set("n", "<C-w>u", "<C-w>j", opts) -- down
vim.keymap.set("n", "<C-w>l", "<C-w>k", opts) -- up
vim.keymap.set("n", "<C-w>h", "<C-w>l", opts) -- right

-- move window to edges (uppercase)
vim.keymap.set("n", "<C-w>K", "<C-w>H", opts) -- far left
vim.keymap.set("n", "<C-w>U", "<C-w>J", opts) -- bottom   (U = down)
vim.keymap.set("n", "<C-w>L", "<C-w>K", opts) -- top      (L = up)
vim.keymap.set("n", "<C-w>H", "<C-w>L", opts) -- far right (K = right)

-- vim.keymap.set("n", "<C-w>r", "<C-w>r", opts)
-- vim.keymap.set("n", "<C-w>R", "<C-w>R", opts)

-- ===== <leader>w-prefixed helpers (mirroring the scheme) =====
vim.keymap.set("n", "<leader>wk", "<C-w>h", { desc = "Window left" })
vim.keymap.set("n", "<leader>wu", "<C-w>j", { desc = "Window down" })
vim.keymap.set("n", "<leader>wl", "<C-w>k", { desc = "Window up" })
vim.keymap.set("n", "<leader>wh", "<C-w>l", { desc = "Window right" })

-- keep your existing resize / split bindings or add:
vim.keymap.set("n", "<leader>wv", "<C-w>v", { desc = "Vertical split" })
vim.keymap.set("n", "<leader>ws", "<C-w>s", { desc = "Horizontal split" })
vim.keymap.set("n", "<leader>w=", "<C-w>=", { desc = "Equalize" })
vim.keymap.set("n", "<leader>wc", "<C-w>c", { desc = "Close window" })

vim.keymap.set("n", "<S-l>", "<C-w>k", { desc = "Window up" })
vim.keymap.set("n", "<S-u>", "<C-w>j", { desc = "Window down" })
vim.keymap.set("n", "<S-k>", "<C-w>h", { desc = "Window left" })
vim.keymap.set("n", "<S-h>", "<C-w>l", { desc = "Window right" })

vim.keymap.set("n", "<A-K>", "<C-w>H", { desc = "Move window far left" })
vim.keymap.set("n", "<A-U>", "<C-w>J", { desc = "Move window to bottom" })
vim.keymap.set("n", "<A-L>", "<C-w>K", { desc = "Move window to top" })
vim.keymap.set("n", "<A-H>", "<C-w>L", { desc = "Move window far right" })

pcall(vim.keymap.del, "n", "<C-l>")
keymap("n", "<C-l>", ":resize +2<CR>", { desc = "Resize down" })
keymap("n", "<C-u>", ":resize -2<CR>", { desc = "Resize up" })
keymap("n", "<C-k>", ":vertical resize -2<CR>", { desc = "Resize left" })
keymap("n", "<C-h>", ":vertical resize +2<CR>", { desc = "Resize right" })

keymap("n", "<C-h>", ":bnext<CR>", { desc = "Next buffer", silent = true })
keymap("n", "<C-k>", ":bprevious<CR>", { desc = "Previous buffer", silent = true })
keymap("n", "<A-w>", "<Cmd>bdelete<CR>", { silent = true })
vim.api.nvim_create_autocmd("LspAttach", {
	callback = function(args)
		vim.keymap.set("n", "<C-k>", ":bprevious<CR>", { buffer = args.buf, desc = "Previous buffer" })
	end,
})

-- Move text up and down
keymap("n", "<A-l>", ":m .-2<CR>==", { desc = "Move line up" })
keymap("n", "<A-u>", ":m .+1<CR>==", { desc = "Move line down" })
keymap("v", "<A-l>", ":m '>+1<CR>gv=gv", { desc = "Move selection down" })
keymap("v", "<A-u>", ":m '<-2<CR>gv=gv", { desc = "Move selection up" })

-- Stay in indent mode
keymap("v", "<", "<gv", { desc = "Indent left" })
keymap("v", ">", ">gv", { desc = "Indent right" })

-- Better paste
keymap("x", "p", '"_dP', { desc = "Paste without yanking" })

-- Clear highlights
keymap("n", "<Esc>", ":noh<CR>", { desc = "Clear highlights" })

-- Save file
keymap({ "n", "i", "v" }, "<C-s>", "<cmd>w<cr>", { desc = "Save file" })

-- Quit
keymap("n", "<leader>q", ":q<CR>", { desc = "Quit" })
keymap("n", "<leader>Q", ":qa<CR>", { desc = "Quit all" })
-- Split windows
keymap("n", "<leader>sv", "<C-w>v", { desc = "Split window vertically" })
keymap("n", "<leader>sh", "<C-w>s", { desc = "Split window horizontally" })
keymap("n", "<leader>se", "<C-w>=", { desc = "Make splits equal size" })
keymap("n", "<leader>sx", "<cmd>close<CR>", { desc = "Close current split" })

vim.g.copilot_no_tab_map = true
vim.g.copilot_assume_mapped = true
keymap("i", "<S-CR>", 'copilot#Accept("")', { expr = true, silent = true, noremap = true, replace_keycodes = true })

vim.keymap.set("i", "<Esc>[13;2u", function()
	if vim.fn["copilot#GetDisplayedSuggestion"]().text ~= "" then
		return vim.fn["copilot#Accept"]("")
	else
		return "<CR>"
	end
end, { expr = true, silent = true, noremap = true, replace_keycodes = false, desc = "Accept Copilot with Shift+Enter" })

keymap("i", "<S-CR>", function()
	if vim.fn["copilot#GetDisplayedSuggestion"]().text ~= "" then
		return vim.fn["copilot#Accept"]("")
	else
		return "<CR>"
	end
end, { expr = true, silent = true, noremap = true, replace_keycodes = false, desc = "Accept Copilot or newline" })
